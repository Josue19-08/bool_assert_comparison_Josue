//! > assert_eq! with false

//! > cairo_code
fn main() {
    assert_eq!("a".is_empty(), false);
}

//! > diagnostics
warning: Plugin diagnostic: assert_eq!(expr, false) can be replaced with assert!(!expr).
 --> lib.cairo:2:5
  |
2 |     assert_eq!("a".is_empty(), false);
  |     ---------------------------------
  |
error: Plugin diagnostic: `assert_eq` macro is only available in test mode.
 --> lib.cairo:2:5
  |
2 |     assert_eq!("a".is_empty(), false);
  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  |
error: Ambiguous method call. More than one applicable trait function with a suitable self type was found: ArrayTrait::is_empty and SpanTrait::is_empty. Consider adding type annotations or explicitly refer to the impl function.
 --> lib.cairo[assert_eq_macro]:2:49
  |
2 |     let __lhs_value_for_assert_eq_macro__ = "a".is_empty();
  |                                                 ^^^^^^^^
  |

//! > fixed
fn main() {
assert!(!"a".is_empty());;
}

//! > ==========================================================================

//! > assert_eq! with true

//! > cairo_code
fn main() {
    assert_eq!("a".is_empty(), true);
}

//! > diagnostics
warning: Plugin diagnostic: assert_eq!(expr, true) can be replaced with assert!(expr).
 --> lib.cairo:2:5
  |
2 |     assert_eq!("a".is_empty(), true);
  |     --------------------------------
  |
error: Plugin diagnostic: `assert_eq` macro is only available in test mode.
 --> lib.cairo:2:5
  |
2 |     assert_eq!("a".is_empty(), true);
  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  |
error: Ambiguous method call. More than one applicable trait function with a suitable self type was found: ArrayTrait::is_empty and SpanTrait::is_empty. Consider adding type annotations or explicitly refer to the impl function.
 --> lib.cairo[assert_eq_macro]:2:49
  |
2 |     let __lhs_value_for_assert_eq_macro__ = "a".is_empty();
  |                                                 ^^^^^^^^
  |

//! > fixed
fn main() {
assert!("a".is_empty());;
}

//! > ==========================================================================

//! > assert_ne! with false

//! > cairo_code
fn main() {
    assert_ne!("a".is_empty(), false);
}

//! > diagnostics
warning: Plugin diagnostic: assert_ne!(expr, false) can be replaced with assert!(expr).
 --> lib.cairo:2:5
  |
2 |     assert_ne!("a".is_empty(), false);
  |     ---------------------------------
  |
error: Plugin diagnostic: `assert_ne` macro is only available in test mode.
 --> lib.cairo:2:5
  |
2 |     assert_ne!("a".is_empty(), false);
  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  |
error: Ambiguous method call. More than one applicable trait function with a suitable self type was found: ArrayTrait::is_empty and SpanTrait::is_empty. Consider adding type annotations or explicitly refer to the impl function.
 --> lib.cairo[assert_ne_macro]:2:49
  |
2 |     let __lhs_value_for_assert_ne_macro__ = "a".is_empty();
  |                                                 ^^^^^^^^
  |

//! > fixed
fn main() {
assert!("a".is_empty());;
}

//! > ==========================================================================

//! > assert_ne! with true

//! > cairo_code
fn main() {
    assert_ne!("a".is_empty(), true);
}

//! > diagnostics
warning: Plugin diagnostic: assert_ne!(expr, true) can be replaced with assert!(!expr).
 --> lib.cairo:2:5
  |
2 |     assert_ne!("a".is_empty(), true);
  |     --------------------------------
  |
error: Plugin diagnostic: `assert_ne` macro is only available in test mode.
 --> lib.cairo:2:5
  |
2 |     assert_ne!("a".is_empty(), true);
  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  |
error: Ambiguous method call. More than one applicable trait function with a suitable self type was found: ArrayTrait::is_empty and SpanTrait::is_empty. Consider adding type annotations or explicitly refer to the impl function.
 --> lib.cairo[assert_ne_macro]:2:49
  |
2 |     let __lhs_value_for_assert_ne_macro__ = "a".is_empty();
  |                                                 ^^^^^^^^
  |

//! > fixed
fn main() {
assert!(!"a".is_empty());;
}
