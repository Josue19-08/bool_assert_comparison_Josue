//! > assert_eq! with false

//! > cairo_code
#[cfg(test)]
fn main() {
    let a: Array<felt252> = ArrayTrait::new();
    assert_eq!(a.is_empty(), false);
}

//! > diagnostics

//! > fixed
#[cfg(test)]
fn main() {
    let a: Array<felt252> = ArrayTrait::new();
    assert_eq!(a.is_empty(), false);
}

//! > ==========================================================================

//! > assert_eq! with true

//! > cairo_code
#[cfg(test)]
fn main() {
    let a: Array<felt252> = ArrayTrait::new();
    assert_eq!(a.is_empty(), true);
}

//! > diagnostics

//! > fixed
#[cfg(test)]
fn main() {
    let a: Array<felt252> = ArrayTrait::new();
    assert_eq!(a.is_empty(), true);
}

//! > ==========================================================================

//! > assert_ne! with false

//! > cairo_code
#[cfg(test)]
fn main() {
    let a: Array<felt252> = ArrayTrait::new();
    assert_ne!(a.is_empty(), false);
}

//! > diagnostics

//! > fixed
#[cfg(test)]
fn main() {
    let a: Array<felt252> = ArrayTrait::new();
    assert_ne!(a.is_empty(), false);
}

//! > ==========================================================================

//! > assert_ne! with true

//! > cairo_code
#[cfg(test)]
fn main() {
    let a: Array<felt252> = ArrayTrait::new();
    assert_ne!(a.is_empty(), true);
}

//! > diagnostics

//! > fixed
#[cfg(test)]
fn main() {
    let a: Array<felt252> = ArrayTrait::new();
    assert_ne!(a.is_empty(), true);
}
